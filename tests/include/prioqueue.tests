## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Test suite for struct::prioqueue, common parts across implementations.
#
## Two complementary constraints (prioqueue_c, prioqueue_tcl) tell us
## which implementation is under test.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## Copyright (c) 2002 Michael Schlenker
## Copyright (c) 2012 Andreas Kupries

# # ## ### ##### ######## ############# #####################
## Basic construction

test prioqueue-1.0.1 {new, wrong#args, too many} -constraints prioqueue_c -body {
    struct prioqueue new X
} -returnCodes error -result {wrong # args: should be "struct prioqueue new"}

test prioqueue-1.1.0 {create, wrong#args, too many} -constraints prioqueue_c -body {
    struct prioqueue create foo X
} -returnCodes error -result {wrong # args: should be "::struct::prioqueue create foo"}

## !! Note how we are not using the ensemble.
## Tcl generates a broken error message if we do.
test prioqueue-1.0.1 {new, wrong#args, too many} -constraints prioqueue_tcl -body {
    struct::prioqueue new X
} -returnCodes error -result {wrong # args: should be "struct::prioqueue new"}

test prioqueue-1.1.1 {create, wrong#args, too many} -constraints prioqueue_tcl -body {
    struct::prioqueue create foo X
} -returnCodes error -result {wrong # args: should be "struct::prioqueue create foo"}

test prioqueue-1.2 {constructor, create, existing command} -setup {
    struct prioqueue create myprioqueue
} -body {
    struct prioqueue create myprioqueue
} -cleanup {
    myprioqueue destroy
} -returnCodes error -result [already myprioqueue]

test prioqueue-1.3 {constructor, create, existing command} -body {
    struct prioqueue create set
} -returnCodes error -result [already set]

test prioqueue-1.4 {constructor, create} -setup {
    set result {}
} -body {
    lappend result [struct prioqueue create myprioqueue]
    lappend result [info commands ::myprioqueue]
    lappend result [myprioqueue size]
    lappend result [myprioqueue type]
    lappend result [myprioqueue order]
} -cleanup {
    myprioqueue destroy
    unset result
} -result {::myprioqueue ::myprioqueue 0 -integer -decreasing}

test prioqueue-1.5.0 {constructor, new} -constraints prioqueue_c -setup {
    set result {}
} -body {
    lappend result [set foo [struct prioqueue new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
    lappend result [$foo type]
    lappend result [$foo order]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::struct::prioqueue* ::struct::prioqueue* 0 -integer -decreasing}

test prioqueue-1.5.1 {constructor, new} -constraints prioqueue_tcl -setup {
    set result {}
} -body {
    lappend result [set foo [struct prioqueue new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
    lappend result [$foo type]
    lappend result [$foo order]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0 -integer -decreasing}

# # ## ### ##### ######## ############# #####################
## Construction with options specifying key type and order.

test prioqueue-2.0 {constructor, create, bad option} -body {
    struct prioqueue create myprioqueue -foo
} -returnCodes error -result {Unknown option "-foo", expected one of ...}
# TODO fix error message.

test prioqueue-3.0 {constructor, new, bad option} -body {
    struct prioqueue new -foo
} -returnCodes error -result {Unknown option "-foo", expected one of ...}
# TODO fix error message.

foreach {n options} {
    1 {-integer -increasing}
    2 {-integer -decreasing}
    3 {-real -increasing}
    4 {-real -decreasing}
    5 {-ascii -increasing}
    6 {-ascii -decreasing}
    7 {-dict -increasing}
    8 {-dict -decreasing}
} {
    test prioqueue-2.$n {constructor, create, option and query} -body {
	struct prioqueue create myprioqueue {*}$options
	list [myprioqueue type] [myprioqueue order]
    } -cleanup {
	myprioqueue destroy
    } -result $options

    test prioqueue-3.$n {constructor, new, option and query} -body {
	set foo [struct prioqueue new {*}$options]
	list [$foo type] [$foo order]
    } -cleanup {
	$foo destroy
	unset foo
    } -result $options
}

# # ## ### ##### ######## ############# #####################

test prioqueue-4.0.0 {instance, no method} -constraints prioqueue_c -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue
} -cleanup {
    myprioqueue destroy
} -returnCodes error \
    -result {wrong # args: should be "myprioqueue option ?arg arg ...?"}

test prioqueue-4.0.1 {instance, no method} -constraints prioqueue_tcl -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue
} -cleanup {
    myprioqueue destroy
} -returnCodes error \
    -result {wrong # args: should be "myprioqueue method ?arg ...?"}

test prioqueue-4.1 {instance, bad method name} -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue foo
} -cleanup {
    myprioqueue destroy
} -returnCodes error \
    -result [badmethod foo {clear destroy order peek peekpriority pop put size type}]

# # ## ### ##### ######## ############# #####################

test prioqueue-5.0 {destroy, wrong#args, too many} -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue destroy X
} -cleanup {
    myprioqueue destroy
} -returnCodes error -result {wrong # args: should be "myprioqueue destroy"}

test prioqueue-5.1 {destroy} -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue destroy
    info commands ::myprioqueue
} -result {}

# # ## ### ##### ######## ############# #####################

test prioqueue-6.0 {size, wrong#args, too many} -setup {
    struct prioqueue create myprioqueue
} -body {
    myprioqueue size X
} -cleanup {
    myprioqueue destroy
} -returnCodes error -result {wrong # args: should be "myprioqueue size"}

test prioqueue-6.1 {size} -setup {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 c 1 d 1 e 1 f 1 g 1
} -body {
    myprioqueue size
} -cleanup {
    myprioqueue destroy
} -result 7

test prioqueue-6.2 {size} -setup {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 c 1 d 1 e 1 f 1 g 1
    myprioqueue get 3
} -body {
    myprioqueue size
} -cleanup {
    myprioqueue destroy
} -result 4

test prioqueue-6.3 {size} -setup {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 c 1 d 1 e 1 f 1 g 1 
    myprioqueue pop  3
    myprioqueue peek 3
} -body {
    myprioqueue size
} -cleanup {
    myprioqueue destroy
} -result 4
   
# # ## ### ##### ######## ############# #####################
return

 
test prioqueue-4.1 {put operation} {
    prioqueue myprioqueue
    catch {myprioqueue put} msg
    myprioqueue destroy
    set msg
} "wrong # args: should be \"myprioqueue put item prio ?item prio ...?\""

test prioqueue-4.1a {put operation} {
    prioqueue myprioqueue
    catch {myprioqueue put a} msg
    myprioqueue destroy
    set msg
} "wrong # args: should be \"myprioqueue put item prio ?item prio ...?\""

test prioqueue-4.2 {put operation, singleton items} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a b c"

test prioqueue-4.3 {put operation, singleton items} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 2
    myprioqueue put c 3
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "c b a"

test prioqueue-4.4 {put operation, singleton items} {
    prioqueue myprioqueue
    myprioqueue put a 3
    myprioqueue put b 2
    myprioqueue put c 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a b c"

test prioqueue-4.5 {put operation, singleton items} {
    prioqueue myprioqueue
    myprioqueue put a 3
    myprioqueue put b 1
    myprioqueue put c 2
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a c b"

test prioqueue-4.6 {put operation, singleton items} {
    prioqueue -ascii myprioqueue 
    myprioqueue put a a
    myprioqueue put b b
    myprioqueue put c c
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a b c"

test prioqueue-4.7 {put operation, singleton items} {
    prioqueue -dictionary myprioqueue
    myprioqueue put a a
    myprioqueue put b b
    myprioqueue put c c
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a b c"

test prioqueue-4.8 {put operation, singleton items} {
    prioqueue -real myprioqueue
    myprioqueue put a 1.0
    myprioqueue put b 2.0
    myprioqueue put c 3.0
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "c b a"

test prioqueue-4.9 {put operation, multiple items} {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 c 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} "a b c"

test prioqueue-4.10 {put operation, spaces in items} {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 "foo bar" 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} [list a b "foo bar"]

test prioqueue-4.11 {put operation, bad chars in items} {
    prioqueue myprioqueue
    myprioqueue put a 1 b 1 \{ 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} [list a b \{]

test prioqueue-4.12 {put operation, bad priorities} {
    prioqueue myprioqueue
    catch {myprioqueue put a a} msg
    myprioqueue destroy
    set msg
} {priority "a" is not an integer type value}

test prioqueue-4.13 {put operation, bad priorities} {
    prioqueue myprioqueue
    catch {myprioqueue put a 1.01} msg
    myprioqueue destroy
    set msg
} {priority "1.01" is not an integer type value}

test prioqueue-4.14 {put operation, bad priorities} {
    prioqueue -real myprioqueue 
    catch {myprioqueue put a 1a} msg
    myprioqueue destroy
    set msg
} {priority "1a" is not a real type value}

test prioqueue-4.15 {put operation, bad priorities} {
    prioqueue -real myprioqueue 
    catch {myprioqueue put a a} msg
    myprioqueue destroy
    set msg
} {priority "a" is not a real type value}

test prioqueue-4.16 {put operation, checking priorities} {
    prioqueue -ascii myprioqueue 
    catch {myprioqueue put a 1.0} msg
    myprioqueue destroy
    set msg
} {}

test prioqueue-4.17 {put operation, checking priorities} {
    prioqueue -dictionary myprioqueue 
    catch {myprioqueue put a "1.0 +1"} msg
    myprioqueue destroy
    set msg
} {}


# # ## ### ##### ######## ############# #####################

test prioqueue-5.1 {get operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [list [myprioqueue get] [myprioqueue get] [myprioqueue get]]
    myprioqueue destroy
    set result
} [list a b c]

test prioqueue-5.2 {get operation, multiple items} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [myprioqueue get 3]
    myprioqueue destroy
    set result
} [list a b c]

# # ## ### ##### ######## ############# #####################

test prioqueue-6.1 {peek operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [list [myprioqueue peek] [myprioqueue peek] [myprioqueue peek]]
    myprioqueue destroy
    set result
} [list a a a]

test prioqueue-6.2 {peek operation} {
    prioqueue myprioqueue
    catch {myprioqueue peek 0} msg
    myprioqueue destroy
    set msg
} {invalid item count 0}

test prioqueue-6.3 {peek operation} {
    prioqueue myprioqueue
    catch {myprioqueue peek -1} msg
    myprioqueue destroy
    set msg
} {invalid item count -1}

test prioqueue-6.4 {peek operation} {
    prioqueue myprioqueue
    catch {myprioqueue peek} msg
    myprioqueue destroy
    set msg
} {insufficient items in prioqueue to fill request}

test prioqueue-6.5 {peek operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    catch {myprioqueue peek 2} msg
    myprioqueue destroy
    set msg
} {insufficient items in prioqueue to fill request}


# # ## ### ##### ######## ############# #####################

test prioqueue-6.6 {get operation, multiple items} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [list [myprioqueue peek 3] [myprioqueue get 3]]
    myprioqueue destroy
    set result
} [list [list a b c] [list a b c]]

test prioqueue-6.7 {get operation} {
    prioqueue myprioqueue
    catch {myprioqueue get 0} msg
    myprioqueue destroy
    set msg
} {invalid item count 0}

test prioqueue-6.8 {get operation} {
    prioqueue myprioqueue
    catch {myprioqueue get -1} msg
    myprioqueue destroy
    set msg
} {invalid item count -1}

test prioqueue-6.9 {get operation} {
    prioqueue myprioqueue
    catch {myprioqueue get} msg
    myprioqueue destroy
    set msg
} {insufficient items in prioqueue to fill request}

test prioqueue-6.10 {get operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    catch {myprioqueue get 2} msg
    myprioqueue destroy
    set msg
} {insufficient items in prioqueue to fill request}

# # ## ### ##### ######## ############# #####################

test prioqueue-7.1 {clear operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 1
    myprioqueue put c 1
    set result [list [myprioqueue peek 3]]
    myprioqueue clear
    lappend result [myprioqueue size]
    myprioqueue destroy
    set result
} [list [list a b c] 0]

# # ## ### ##### ######## ############# #####################

test prioqueue-8.1 {peekpriority operation} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 2
    myprioqueue put c 3
    set result [list [myprioqueue peekpriority] [myprioqueue peekpriority] [myprioqueue peekpriority]]
    myprioqueue destroy
    set result
} [list 3 3 3]

test prioqueue-8.2 {peekpriority operation, multiple items} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 2
    myprioqueue put c 3
    set result [myprioqueue peekpriority 3]
    myprioqueue destroy
    set result
} [list 3 2 1]


# # ## ### ##### ######## ############# #####################

test prioqueue-9.1 {stable ordering if inserting} {
    prioqueue myprioqueue
    myprioqueue put a 1
    myprioqueue put b 2
    myprioqueue put c 1
    set result [myprioqueue peek 3]
    myprioqueue destroy
    set result
} [list b a c ]

test prioqueue-9.2 {stable ordering if inserting} {
    prioqueue -real myprioqueue 
    myprioqueue put a 1.0
    myprioqueue put b 2.0
    myprioqueue put c 1.0
    set result [myprioqueue peek 3]
    myprioqueue destroy
    set result
} [list b a c ]

test prioqueue-9.3 {stable ordering if inserting} {
    prioqueue -dictionary myprioqueue 
    myprioqueue put a a
    myprioqueue put b b
    myprioqueue put c a
    set result [myprioqueue peek 3]
    myprioqueue destroy
    set result
} [list a c b]

test prioqueue-9.4 {stable ordering if inserting} {
    prioqueue -ascii myprioqueue 
    myprioqueue put a a
    myprioqueue put b b
    myprioqueue put c a
    set result [myprioqueue peek 3]
    myprioqueue destroy
    set result
} [list a c b]

# # ## ### ##### ######## ############# #####################

test prioqueue-10.1 {test inserting} {
    prioqueue -integer myprioqueue
    myprioqueue put 1 1
    myprioqueue put 2 5
    myprioqueue put 3 7
    myprioqueue put 4 6
    myprioqueue put 5 0
    set result [myprioqueue get 5]
    myprioqueue destroy
    set result
} [list 3 4 2 1 5]

test prioqueue-10.2 {test deleting} {
    prioqueue -integer myprioqueue
    myprioqueue put 1 1
    myprioqueue put 2 2
    myprioqueue put 3 3
    myprioqueue put 4 4
    set sizep [myprioqueue size]
    myprioqueue remove 2
    set sizen [myprioqueue size]
    set result1 [expr {$sizep > $sizen}]
    set result2 0
    while {[myprioqueue size] > 0} {
	set last [myprioqueue get]
	if {$last == 2} {
	    set result2 1
	}
    }
    myprioqueue destroy
    set result "$result1 $result2"
} {1 0}

# # ## ### ##### ######## ############# #####################
