## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Test suite for struct::stack, common parts across implementations.
#
## Two complementary constraints (stack_c, stack_tcl) tell us
## which implementation is under test.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.

# # ## ### ##### ######## ############# #####################

test stack-1.0.1 {new, wrong#args, too many} -constraints stack_c -body {
    struct stack new X
} -returnCodes error -result {wrong # args: should be "struct stack new"}

test stack-1.1.0 {create, wrong#args, too many} -constraints stack_c -body {
    struct stack create foo X
} -returnCodes error -result {wrong # args: should be "::struct::stack create foo"}

## !! Note how we are not using the ensemble.
## Tcl generates a broken error message if we do.
test stack-1.0.1 {new, wrong#args, too many} -constraints stack_tcl -body {
    struct::stack new X
} -returnCodes error -result {wrong # args: should be "struct::stack new"}

test stack-1.1.1 {create, wrong#args, too many} -constraints stack_tcl -body {
    struct::stack create foo X
} -returnCodes error -result {wrong # args: should be "struct::stack create foo"}

test stack-1.2 {constructor, create, existing command} -setup {
    struct stack create mystack
} -body {
    struct stack create mystack
} -cleanup {
    mystack destroy
} -returnCodes error -result [already mystack]

test stack-1.3 {constructor, create, existing command} -body {
    struct stack create set
} -returnCodes error -result [already set]

test stack-1.4 {constructor, create} -setup {
    set result {}
} -body {
    lappend result [struct stack create mystack]
    lappend result [info commands ::mystack]
    lappend result [mystack size]
} -cleanup {
    mystack destroy
    unset result
} -result {::mystack ::mystack 0}

test stack-1.5.0 {constructor, new} -constraints stack_c -setup {
    set result {}
} -body {
    lappend result [set foo [struct stack new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::struct::stack* ::struct::stack* 0}

test stack-1.5.1 {constructor, new} -constraints stack_tcl -setup {
    set result {}
} -body {
    lappend result [set foo [struct stack new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################

test stack-2.0.0 {instance, no method} -constraints stack_c -setup {
    struct stack create mystack
} -body {
    mystack
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {wrong # args: should be "mystack option ?arg arg ...?"}

test stack-2.0.1 {instance, no method} -constraints stack_tcl -setup {
    struct stack create mystack
} -body {
    mystack
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {wrong # args: should be "mystack method ?arg ...?"}

test stack-2.1 {instance, bad method name} -setup {
    struct stack create mystack
} -body {
    mystack foo
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [badmethod foo {at bottom clear destroy get pop push rotate size top trim trim*}]

# # ## ### ##### ######## ############# #####################

test stack-3.0 {destroy, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack destroy X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack destroy"}

test stack-3.1 {destroy} -setup {
    struct stack create mystack
} -body {
    mystack destroy
    info commands ::mystack
} -result {}

# # ## ### ##### ######## ############# #####################

test stack-4.0 {size, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack size X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack size"}

test stack-4.1 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
} -body {
    mystack size
} -cleanup {
    mystack destroy
} -result 7

test stack-4.2 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
    mystack pop 3
} -body {
   mystack size
} -cleanup {
    mystack destroy
} -result 4

test stack-4.3 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
    mystack pop 3
    mystack top 3
} -body {
  mystack size
} -cleanup {
    mystack destroy
} -result 4

# # ## ### ##### ######## ############# #####################
    
test stack-5.1 {push} -setup {
    struct stack create mystack
} -body {
    mystack push
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack push item ..."}

test stack-5.2 {push, singleton items} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {c b a}

test stack-5.3 {push, multiple items} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {c b a}

test stack-5.4 {push, spaces in items} -setup {
    struct stack create mystack
    mystack push a b "foo bar"
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {{foo bar} b a}

test stack-5.5 {push, bad chars in items} -setup {
    struct stack create mystack
    mystack push a b \{
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result [list \{ b a]

# # ## ### ##### ######## ############# #####################

test stack-6.0 {pop, empty} -setup {
    struct stack create mystack
} -body {
    mystack pop
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-6.1 {pop, bad count, not integer} -setup {
    struct stack create mystack
} -body {
    mystack pop X
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "X"}

test stack-6.2 {pop, bad count, not definite positive} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack pop 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "0"}

test stack-6.3 {pop, bad count, not definite positive} -setup {
    struct stack create mystack
} -body {
    mystack pop -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "-1"}

test stack-6.4 {pop, bad count, too large} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack pop 4
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-6.5 {pop, singles} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {c b a}

test stack-6.6 {pop, multiple items} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
} -body {
    mystack pop 3
} -cleanup {
    mystack destroy
} -result {c b a}

# # ## ### ##### ######## ############# #####################

test stack-7.0 {clear, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack clear X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack clear"}

test stack-7.1 {clear} -setup {
    struct stack create mystack
    mystack push a b c
    set result {}
} -body {
    lappend result [mystack size]
    mystack clear
    lappend result [mystack size]
    set result
} -cleanup {
    mystack destroy
} -result {3 0}

# # ## ### ##### ######## ############# #####################

test stack-8.0 {rotate, wrong#args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack rotate
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::wrongNumArgs "mystack rotate" {n steps} 0]

test stack-8.1 {rotate, wrong#args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack rotate X
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::wrongNumArgs "mystack rotate" {n steps} 1]

test stack-8.2 {rotate, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack rotate X Y Z
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::tooManyArgs "mystack rotate" {n steps}]

test stack-8.3 {rotate, bad count, not integer} -setup {
    struct stack create mystack
} -body {
    mystack rotate X 0
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected positive integer but got "X"}

test stack-8.4 {rotate, bad count, not definite positive} -setup {
    struct stack create mystack
} -body {
    mystack rotate 0 0
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected positive integer but got "0"}

test stack-8.5 {rotate, bad count, not definite positive} -setup {
    struct stack create mystack
} -body {
    mystack rotate -1 0
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected positive integer but got "-1"}

test stack-8.6 {rotate, bad count, too large} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    mystack rotate 5 0
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {not enough elements}

test stack-8.7 {rotate, bad steps} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    mystack rotate 1 X
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected integer but got "X"}

foreach {k n steps result} {
    8    3  1 {g f h e d c b a}
    9    3  2 {f h g e d c b a}
    10    3  3 {h g f e d c b a}
    11    3  5 {f h g e d c b a}
    12    8  1 {g f e d c b a h}
    13    8 -1 {a h g f e d c b}
    14    8  0 {h g f e d c b a}
    15    1  4 {h g f e d c b a}
    16    1  0 {h g f e d c b a}
} {
    # pre-rol  {h g f e d c b a}
    test stack-8.$k {rotate} -setup {
	struct stack create mystack
	mystack push a b c d e f g h
    } -body {
	mystack rotate $n $steps
	mystack get
    } -cleanup {
	mystack destroy
    } -result $result
}

# # ## ### ##### ######## ############# #####################

test stack-9.0 {get, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack get X
} -cleanup {
    mystack destroy
} -returnCodes error -result [tcltest::tooManyArgs "mystack get" {}]

test stack-9.1 {get, empty} -setup {
    struct stack create mystack
} -body {
    mystack get
} -cleanup {
    mystack destroy
    set result
} -result {}

test stack-9.2 {get} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    mystack get
} -cleanup {
    mystack destroy
    set result
} -result {d c b a}

# # ## ### ##### ######## ############# #####################

test stack-10.0 {trim, wrong args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack trim
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::wrongNumArgs "mystack trim" {n} 0]

test stack-10.1 {trim, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack trim X Y
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::tooManyArgs "mystack trim" {n}]

test stack-10.2 {trim, bad argument} -setup {
    struct stack create mystack
} -body {
    mystack trim X
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected non-negative integer but got "X"}

test stack-10.3 {trim, bad argument} -setup {
    struct stack create mystack
} -body {
    mystack trim -4
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected non-negative integer but got "-4"}

test stack-10.4 {trim, empty stack} -setup {
    struct stack create mystack
} -body {
    list [mystack size] [mystack trim 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {0 {} 0}

test stack-10.5 {trim} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    list [mystack size] [mystack trim 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {d c b} 1}

test stack-10.6 {trim} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
} -body {
    list [mystack size] [mystack trim 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {d c b} 1}

test stack-10.7 {trim} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    list [mystack size] [mystack trim 5] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {} 4}

# # ## ### ##### ######## ############# #####################

test stack-11.0 {trim*, wrong args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack trim*
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::wrongNumArgs "mystack trim*" {n} 0]

test stack-11.1 {trim*, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack trim* X Y
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [tcltest::tooManyArgs "mystack trim*" {n}]

test stack-11.2 {trim*, bad argument} -setup {
    struct stack create mystack
} -body {
    mystack trim* X
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected non-negative integer but got "X"}

test stack-11.3 {trim*, bad argument} -setup {
    struct stack create mystack
} -body {
    mystack trim* -4
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {expected non-negative integer but got "-4"}

test stack-11.4 {trim*, empty stack} -setup {
    struct stack create mystack
} -body {
    list [mystack size] [mystack trim* 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {0 {} 0}

test stack-11.5 {trim*} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    list [mystack size] [mystack trim* 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {} 1}

test stack-11.6 {trim*} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
} -body {
    list [mystack size] [mystack trim* 1] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {} 1}

test stack-11.7 {trim*} -setup {
    struct stack create mystack
    mystack push a b c d
} -body {
    list [mystack size] [mystack trim* 5] [mystack size]
} -cleanup {
    mystack destroy
} -result {4 {} 4}

# # ## ### ##### ######## ############# #####################

test stack-12.0 {at, wrong # args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack at
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack at at"}

test stack-12.1 {at, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack at X Y
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack at at"}

test stack-12.2 {at, bad index, not integer} -setup {
    struct stack create mystack
} -body {
    mystack at X
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "X": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.3 {at, bad index, bad format} -setup {
    struct stack create mystack
} -body {
    mystack at end-X
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "end-X": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.4 {at, bad index, bad format} -setup {
    struct stack create mystack
} -body {
    mystack at N+M
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "N+M": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.5 {at, bad index, bad format} -setup {
    struct stack create mystack
} -body {
    mystack at N-M
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "N-M": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.6 {at, bad index, bad format} -setup {
    struct stack create mystack
} -body {
    mystack at 1+M
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "1+M": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.7 {at, bad index, bad format} -setup {
    struct stack create mystack
} -body {
    mystack at 1-M
} -cleanup {
    mystack destroy
} -returnCodes error -result {bad index "1-M": must be integer?[+-]integer? or end?[+-]integer?}

test stack-12.8 {at, bad index, too small} -setup {
    struct stack create mystack
} -body {
    mystack at -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index "-1"}

test stack-12.9 {at, bad index, too small} -setup {
    struct stack create mystack
} -body {
    mystack at 0-1
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index "-1"}

test stack-12.10 {at, bad index, too large} -setup {
    struct stack create mystack
} -body {
    mystack at 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index "0"}

test stack-12.11 {at, bad index, too large} -setup {
    struct stack create mystack
} -body {
    mystack at 0+0
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index "0"}

test stack-12.12 {at} -setup {
    struct stack create mystack
    mystack push a b c
    set result {}
} -body {
    lappend result [mystack at 0]
    lappend result [mystack at 1]
    lappend result [mystack at 2]

    lappend result [mystack at end]
    lappend result [mystack at end-1]
    lappend result [mystack at end-2]

    lappend result [mystack at 1+1]
    lappend result [mystack at 3-1]
} -cleanup {
    mystack destroy
    unset result
} -result {c b a a b c a a}

# # ## ### ##### ######## ############# #####################

test stack-13.0 {bottom, empty} -setup {
    struct stack create mystack
} -body {
    mystack bottom
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-13.1 {bottom, bad count, not integer} -setup {
    struct stack create mystack
} -body {
    mystack bottom X
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "X"}

test stack-13.2 {bottom, bad count, not definite positive} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack bottom 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "0"}

test stack-13.3 {bottom, bad count, not definite positive} -setup {
    struct stack create mystack
} -body {
    mystack bottom -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "-1"}

test stack-13.4 {bottom, bad count, too large} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack bottom 4
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-13.5 {bottom} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    list [mystack bottom] [mystack bottom 2] [mystack bottom 3]
} -cleanup {
    mystack destroy
} -result {a {b a} {c b a}}

# # ## ### ##### ######## ############# #####################

test stack-14.0 {top, empty} -setup {
    struct stack create mystack
} -body {
    mystack top
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-14.1 {top, bad count, not integer} -setup {
    struct stack create mystack
} -body {
    mystack top X
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "X"}

test stack-14.2 {top, bad count, not definite positive} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack top 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "0"}

test stack-14.3 {top, bad count, not definite positive} -setup {
    struct stack create mystack
} -body {
    mystack top -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected positive integer but got "-1"}

test stack-14.4 {top, bad count, too large} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack top 4
} -cleanup {
    mystack destroy
} -returnCodes error -result {not enough elements}

test stack-14.5 {top} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    list [mystack top] [mystack top 2] [mystack top 3]
} -cleanup {
    mystack destroy
} -result {c {c b} {c b a}}

# # ## ### ##### ######## ############# #####################

