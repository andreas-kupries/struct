## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Test suite for struct::stack, common parts across implementations.
#
## Two complementary constraints (stack_c, stack_tcl) tell us
## which implementation is under test.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.

# # ## ### ##### ######## ############# #####################

test stack-1.0.1 {new, wrong#args, too many} -constraints stack_c -body {
    struct stack new X
} -returnCodes error -result {wrong # args: should be "struct stack new"}

test stack-1.1.0 {create, wrong#args, too many} -constraints stack_c -body {
    struct stack create foo X
} -returnCodes error -result {wrong # args: should be "::struct::stack create foo"}

## !! Note how we are not using the ensemble.
## Tcl generates a broken error message if we do.
test stack-1.0.1 {new, wrong#args, too many} -constraints stack_tcl -body {
    struct::stack new X
} -returnCodes error -result {wrong # args: should be "struct::stack new"}

test stack-1.1.1 {create, wrong#args, too many} -constraints stack_tcl -body {
    struct::stack create foo X
} -returnCodes error -result {wrong # args: should be "struct::stack create foo"}

test stack-1.2 {constructor, create, existing command} -setup {
    struct stack create mystack
} -body {
    struct stack create mystack
} -cleanup {
    mystack destroy
} -returnCodes error -result [already mystack]

test stack-1.3 {constructor, create, existing command} -body {
    struct stack create set
} -returnCodes error -result [already set]

test stack-1.4 {constructor, create} -setup {
    set result {}
} -body {
    lappend result [struct stack create mystack]
    lappend result [info commands ::mystack]
    lappend result [mystack size]
} -cleanup {
    mystack destroy
    unset result
} -result {::mystack ::mystack 0}

test stack-1.5.0 {constructor, new} -constraints stack_c -setup {
    set result {}
} -body {
    lappend result [set foo [struct stack new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::struct::stack* ::struct::stack* 0}

test stack-1.5.1 {constructor, new} -constraints stack_tcl -setup {
    set result {}
} -body {
    lappend result [set foo [struct stack new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################

test stack-2.0.0 {instance, no method} -constraints stack_c -setup {
    struct stack create mystack
} -body {
    mystack
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {wrong # args: should be "mystack option ?arg arg ...?"}

test stack-2.0.1 {instance, no method} -constraints stack_tcl -setup {
    struct stack create mystack
} -body {
    mystack
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result {wrong # args: should be "mystack method ?arg ...?"}

test stack-2.1 {instance, bad method name} -setup {
    struct stack create mystack
} -body {
    mystack foo
} -cleanup {
    mystack destroy
} -returnCodes error \
    -result [badmethod foo {at atr clear destroy get getr peek peekr pop push rotate size top trim trim*}]

# # ## ### ##### ######## ############# #####################

test stack-3.0 {destroy, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack destroy X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack destroy"}

test stack-3.1 {destroy} -setup {
    struct stack create mystack
} -body {
    mystack destroy
    info commands ::mystack
} -result {}

# # ## ### ##### ######## ############# #####################

test stack-4.0 {size, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack size X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack size"}

test stack-4.1 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
} -body {
    mystack size
} -cleanup {
    mystack destroy
} -result 7

test stack-4.2 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
    mystack pop 3
} -body {
   mystack size
} -cleanup {
    mystack destroy
} -result 4

test stack-4.3 {size} -setup {
    struct stack create mystack
    mystack push a b c d e f g
    mystack pop 3
    mystack peek 3
} -body {
  mystack size
} -cleanup {
    mystack destroy
} -result 4

# # ## ### ##### ######## ############# #####################
    
test stack-5.1 {push} -setup {
    struct stack create mystack
} -body {
    mystack push
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack push item ..."}

test stack-5.2 {push, singleton items} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {c b a}

test stack-5.3 {push, multiple items} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {c b a}

test stack-5.4 {push, spaces in items} -setup {
    struct stack create mystack
    mystack push a b "foo bar"
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result {{foo bar} b a}

test stack-5.5 {push, bad chars in items} -setup {
    struct stack create mystack
    mystack push a b \{
} -body {
    list [mystack pop] [mystack pop] [mystack pop]
} -cleanup {
    mystack destroy
} -result [list \{ b a]

# # ## ### ##### ######## ############# #####################

test stack-6.1 {pop} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result [list [mystack pop] [mystack pop] [mystack pop]]
    mystack destroy
    set result
} {c b a}

test stack-6.2 {pop, multiple items} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result [mystack pop 3]
    mystack destroy
    set result
} {c b a}

# # ## ### ##### ######## ############# #####################

test stack-7.1 {peek} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result [list [mystack peek] [mystack peek] [mystack peek]]
    mystack destroy
    set result
} {c c c}

test stack-7.2 {peek} {
    struct stack create mystack
    catch {mystack peek 0} msg
    mystack destroy
    set msg
} {invalid item count 0}

test stack-7.3 {peek} {
    struct stack create mystack
    catch {mystack peek -1} msg
    mystack destroy
    set msg
} {invalid item count -1}

test stack-7.4 {peek} {
    struct stack create mystack
    catch {mystack peek} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

test stack-7.5 {peek} {
    struct stack create mystack
    mystack push a
    catch {mystack peek 2} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

test stack-7.11 {peek} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set result [mystack peek 3]
    mystack destroy
    set result
} {d c b}

# # ## ### ##### ######## ############# #####################

test stack-7.6 {pop, multiple items} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result [list [mystack peek 3] [mystack pop 3]]
    mystack destroy
    set result
} {{c b a} {c b a}}

test stack-7.7 {pop} {
    struct stack create mystack
    catch {mystack pop 0} msg
    mystack destroy
    set msg
} {invalid item count 0}

test stack-7.8 {pop} {
    struct stack create mystack
    catch {mystack pop -1} msg
    mystack destroy
    set msg
} {invalid item count -1}

test stack-7.9 {pop} {
    struct stack create mystack
    catch {mystack pop} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

test stack-7.10 {pop} {
    struct stack create mystack
    mystack push a
    catch {mystack pop 2} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

# # ## ### ##### ######## ############# #####################

test stack-8.0 {clear, wrong#args, too many} -setup {
    struct stack create mystack
} -body {
    mystack clear X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack clear"}

test stack-8.1 {clear} -setup {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result {}
} -body {
    lappend result [mystack size]
    mystack clear
    lappend result [mystack size]
    set result
} -cleanup {
    mystack destroy
} -result {3 0}

# # ## ### ##### ######## ############# #####################

test stack-9.1 {rotate} {
    struct stack create mystack
    mystack push a b c d e f g h
    mystack rotate 3 1
    set result [mystack get]
    mystack destroy
    set result
} {g f h e d c b a}

test stack-9.2 {rotate} {
    struct stack create mystack
    mystack push a b c d e f g h
    mystack rotate 3 2
    set result [mystack get]
    mystack destroy
    set result
} {f h g e d c b a}

test stack-9.3 {rotate} {
    struct stack create mystack
    mystack push a b c d e f g h
    mystack rotate 3 5
    set result [mystack get]
    mystack destroy
    set result
} {f h g e d c b a}

test stack-9.4 {rotate} {
    struct stack create mystack
    mystack push a b c d e f g h
    mystack rotate 8 1
    set result [mystack get]
    mystack destroy
    set result
} {g f e d c b a h}

test stack-9.5 {rotate} {
    struct stack create mystack
    mystack push a b c d e f g h
    mystack rotate 8 -1
    set result [mystack get]
    mystack destroy
    set result
} {a h g f e d c b}

test stack-9.6 {rotate} {
    struct stack create mystack
    catch {mystack rotate 8 -1} msg
    mystack destroy
    set msg
} {insufficient items on stack to perform request}

test stack-9.7 {rotate} {
    struct stack create mystack
    mystack push a b c d
    catch {mystack rotate 8 -1} msg
    mystack destroy
    set msg
} {insufficient items on stack to perform request}

# # ## ### ##### ######## ############# #####################

test stack-10.0 {get, wrong args, too many} {
    struct stack create mystack
    catch {mystack get X} msg
    mystack destroy
    set msg
} [tcltest::tooManyArgs "mystack get" {}]

test stack-10.1 {get, empty stack} {
    struct stack create mystack
    set result [mystack get]
    mystack destroy
    set result
} {}

test stack-10.2 {get} {
    struct stack create mystack
    mystack push a b c d
    set result [mystack get]
    mystack destroy
    set result
} {d c b a}

test stack-10.3 {get} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set result [mystack get]
    mystack destroy
    set result
} {d c b a}

# # ## ### ##### ######## ############# #####################

test stack-11.0 {trim, wrong args, not enough} {
    struct stack create mystack
    catch {mystack trim} msg
    mystack destroy
    set msg
} [tcltest::wrongNumArgs "mystack trim" {n} 0]

test stack-11.1 {trim, wrong args, too many} {
    struct stack create mystack
    catch {mystack trim X Y} msg
    mystack destroy
    set msg
} [tcltest::tooManyArgs "mystack trim" {n}]

test stack-11.2 {trim, bad argument} {
    struct stack create mystack
    catch {mystack trim X} msg
    mystack destroy
    set msg
} {expected integer but got "X"}

test stack-11.3 {trim, bad argument} {
    struct stack create mystack
    catch {mystack trim -4} msg
    mystack destroy
    set msg
} {invalid size -4}

test stack-11.4 {trim, empty stack} {
    struct stack create mystack
    set     result [mystack size]
    lappend result [mystack trim 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {0 {} 0}

test stack-11.5 {trim} {
    struct stack create mystack
    mystack push a b c d
    set     result [mystack size]
    lappend result [mystack trim 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {d c b} 1}

test stack-11.6 {trim} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set     result [mystack size]
    lappend result [mystack trim 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {d c b} 1}

test stack-11.7 {trim} {
    struct stack create mystack
    mystack push a b c d
    set     result [mystack size]
    lappend result [mystack trim 5]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {} 4}

# # ## ### ##### ######## ############# #####################

test stack-12.0 {getr, wrong args, too many} {
    struct stack create mystack
    catch {mystack getr X} msg
    mystack destroy
    set msg
} [tcltest::tooManyArgs "mystack getr" {}]

test stack-12.1 {getr, empty stack} {
    struct stack create mystack
    set result [mystack getr]
    mystack destroy
    set result
} {}

test stack-12.2 {getr} {
    struct stack create mystack
    mystack push a b c d
    set result [mystack getr]
    mystack destroy
    set result
} {a b c d}

test stack-12.3 {getr} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set result [mystack getr]
    mystack destroy
    set result
} {a b c d}

# # ## ### ##### ######## ############# #####################

test stack-13.0 {trim*, wrong args, not enough} {
    struct stack create mystack
    catch {mystack trim*} msg
    mystack destroy
    set msg
} [tcltest::wrongNumArgs "mystack trim*" {n} 0]

test stack-13.1 {trim*, wrong args, too many} {
    struct stack create mystack
    catch {mystack trim* X Y} msg
    mystack destroy
    set msg
} [tcltest::tooManyArgs "mystack trim*" {n}]

test stack-13.2 {trim*, bad argument} {
    struct stack create mystack
    catch {mystack trim* X} msg
    mystack destroy
    set msg
} {expected integer but got "X"}

test stack-13.3 {trim*, bad argument} {
    struct stack create mystack
    catch {mystack trim* -4} msg
    mystack destroy
    set msg
} {invalid size -4}

test stack-13.4 {trim*, empty stack} {
    struct stack create mystack
    set     result [mystack size]
    lappend result [mystack trim* 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {0 {} 0}

test stack-13.5 {trim*} {
    struct stack create mystack
    mystack push a b c d
    set     result [mystack size]
    lappend result [mystack trim* 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {} 1}

test stack-13.6 {trim*} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set     result [mystack size]
    lappend result [mystack trim* 1]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {} 1}

test stack-13.7 {trim*} {
    struct stack create mystack
    mystack push a b c d
    set     result [mystack size]
    lappend result [mystack trim* 5]
    lappend result [mystack size]
    mystack destroy
    set result
} {4 {} 4}

# # ## ### ##### ######## ############# #####################

test stack-14.1 {peekr} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    set result [list [mystack peekr] [mystack peekr] [mystack peekr]]
    mystack destroy
    set result
} {c c c}

test stack-14.2 {peekr} {
    struct stack create mystack
    catch {mystack peekr 0} msg
    mystack destroy
    set msg
} {invalid item count 0}

test stack-14.3 {peekr} {
    struct stack create mystack
    catch {mystack peekr -1} msg
    mystack destroy
    set msg
} {invalid item count -1}

test stack-14.4 {peekr} {
    struct stack create mystack
    catch {mystack peekr} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

test stack-14.5 {peekr} {
    struct stack create mystack
    mystack push a
    catch {mystack peekr 2} msg
    mystack destroy
    set msg
} {insufficient items on stack to fulfill request}

test stack-14.6 {peekr} {
    struct stack create mystack
    mystack push a
    mystack push b
    mystack push c
    mystack push d
    set result [mystack peekr 3]
    mystack destroy
    set result
} {b c d}

# # ## ### ##### ######## ############# #####################

test stack-15.0 {at} -setup {
    struct stack create mystack
} -body {
    mystack at
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack at at"}

test stack-15.1 {at, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack at X Y
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack at at"}

test stack-15.2 {at, bad index, not integer} -setup {
    struct stack create mystack
} -body {
    mystack at X
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected integer but got "X"}

test stack-15.3 {at, bad index, too small} -setup {
    struct stack create mystack
} -body {
    mystack at -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index -1}

test stack-15.4 {at, bad index, too large} -setup {
    struct stack create mystack
} -body {
    mystack at 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index 0}

test stack-15.5 {at} -setup {
    struct stack create mystack
    mystack push a b c
    set result {}
} -body {
    lappend result [mystack at 0]
    lappend result [mystack at 1]
    lappend result [mystack at 2]
} -cleanup {
    mystack destroy
    unset result
} -result {c b a}

# # ## ### ##### ######## ############# #####################

test stack-16.0 {atr, wrong args, not enough} -setup {
    struct stack create mystack
} -body {
    mystack atr
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack atr at"}

test stack-16.1 {atr, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack atr X Y
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack atr at"}

test stack-16.2 {atr, bad index, not integer} -setup {
    struct stack create mystack
} -body {
    mystack atr X
} -cleanup {
    mystack destroy
} -returnCodes error -result {expected integer but got "X"}

test stack-16.3 {atr, bad index, too small} -setup {
    struct stack create mystack
} -body {
    mystack atr -1
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index -1}

test stack-16.4 {atr, bad index, too large} -setup {
    struct stack create mystack
} -body {
    mystack atr 0
} -cleanup {
    mystack destroy
} -returnCodes error -result {invalid index 0}

test stack-16.5 {atr} -setup {
    struct stack create mystack
    mystack push a b c
    set result {}
} -body {
    lappend result [mystack atr 0]
    lappend result [mystack atr 1]
    lappend result [mystack atr 2]
} -cleanup {
    mystack destroy
    unset result
} -result {a b c}

# # ## ### ##### ######## ############# #####################

test stack-17.0 {top, wrong args, too many} -setup {
    struct stack create mystack
} -body {
    mystack top X
} -cleanup {
    mystack destroy
} -returnCodes error -result {wrong # args: should be "mystack top"}

test stack-17.1 {top, empty} -setup {
    struct stack create mystack
} -body {
    mystack top
} -cleanup {
    mystack destroy
} -returnCodes error -result {insufficient items on stack to fulfill request}

test stack-17.3 {top} -setup {
    struct stack create mystack
    mystack push a b c
} -body {
    mystack top
} -cleanup {
    mystack destroy
} -result c

# # ## ### ##### ######## ############# #####################

