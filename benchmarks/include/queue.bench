## -*- tcl -*-
# # ## ### ##### ######## ############# #####################
## Tcl Benchmarks for "struct::queue"
## (c) 2012 Andreas Kupries

# Called on by the benchmark entrypoints of both "queuec" and
# "queuetcl".  The procedure [id] returns a string telling us which
# entrypoint is in use.

#puts [join [info loaded] \n]

# XXX TODO : Create utility command to report disabled
# XXX TODO : benchmarks as skipped, or broken?

# # ## ### ##### ######## ############# #####################
## Helper commands.

proc iota {n} {
    set res {}
    while {$n} { lappend res $n ; incr n -1 }
    return $res
}

proc push {n} {
    if {$n <= 0} return
    ::q append {*}[iota $n]
    return
}

proc make {n} {
    struct queue create ::q
    push $n
    return
}

# ### ### ### ######### ######### ######### ###########################
## Benchmarked methods.

# * all
# * append ...
# * at I N
# * clear
# * head ?N?
# * pop head|tail ?N?
# * prepend ...
# * size
# * tail ?N?

set series {0 1 10 100 1000 10000}

# ### ### ### ######### ######### ######### ###########################

# XXX NOTE: The queue has internal structure (multiple stacks) which
#           can influence speed. Right now we are profiling a queue in
#           basic state with only the tail stack filled. We should
#           profile other states as well, with the other stacks
#           containing data, forcing the operations through the more
#           complex branches of the system.

# XXX FUTURE: iota as is generates n distinct elements.
#             (minimal sharing of the underlying Tcl_Obj*)
#
#             What happens if we use the same value for all elements
#             (maximal sharing of the underlying Tcl_Obj*).

# ### ### ### ######### ######### ######### ###########################

# size - Time to query the size of a queue containing N elements.
# N in { 0 1 10 100 1000 10000 }
# Expected O(1).

foreach n $series {
    bench -desc "queue size $n" -pre {
	make $n
    } -body {
	q size
    } -post {
	q destroy
    }
}

# ### ### ### ######### ######### ######### ###########################

# clear - Time to clear a queue containing N elements.
# N in { 0 1 10 100 1000 10000 }
# Expected O(n), n = size of queue

# For size 0 'clear' is idempotent and can be run multiple times in one go.
bench -desc "queue clear 0" -pre {
    make 0
} -body {
    q clear
} -post {
    q destroy
}

# For size > 0 we have to re-make the queue for each iteration.
# FUTURE: See if we can somehow integrate a sampling profiler to mark
# the interesting region, allowing us to put setup code into benchmark
# while not counting the time spent in it.

foreach n $series {
    if {$n == 0} continue

    bench -desc "queue clear $n" -ipre {
	make $n
    } -body {
	q clear
    } -ipost {
	q destroy
    }
}

# ### ### ### ######### ######### ######### ###########################

# all - Time to return a list of all elements from a queue containing
#       N elements.
# N in { 0 1 10 100 1000 10000 }
# Expected O(n), n = size of queue

foreach n $series {
    bench -desc "queue all $n" -pre {
	make $n
    } -body {
	q all
    } -post {
	q destroy
    }
}

# ### ### ### ######### ######### ######### ###########################

# head - Time to return a list of the first M elements from a queue
#        containing N elements.

# N in { 0 1 10 100 1000 10000 }
# M in {   1 10 ... N }

# Expected O(m), m = size of result.

foreach n $series {
    foreach m $series {
	if {$m == 0} continue
	if {$m > $n} continue

	bench -desc "queue head $n/$m" -pre {
	    make $n
	} -body {
	    q head $m
	} -post {
	    q destroy
	}
    }
}

# ### ### ### ######### ######### ######### ###########################

# tail - Time to return a list of the last M elements from a queue
#        containing N elements.

# N in { 0 1 10 100 1000 10000 }
# M in {   1 10 ... N }

# Expected O(m), m = size of result.

foreach n $series {
    foreach m $series {
	if {$m == 0} continue
	if {$m > $n} continue

	bench -desc "queue tail $n/$m" -pre {
	    make $n
	} -body {
	    q tail $m
	} -post {
	    q destroy
	}
    }
}

# ### ### ### ######### ######### ######### ###########################

# at - Time to return the M'th element from a queue
#          containing N elements.

# XXX NOTE: Extend to profile slices > 1
#           (at is generalized head/tail)

# N in { 0 1 10 100 1000 10000 }
# M in { 0 1 10 ... pred(N) }

# Expected O(1)

foreach n $series {
    foreach m $series {
	if {$m >= $n} continue

	bench -desc "queue at $n/$m" -pre {
	    make $n
	} -body {
	    q at $m
	} -post {
	    q destroy
	}
    }
}

# ### ### ### ######### ######### ######### ###########################

# pop - Time to return a list of the first/last M elements from a
#       queue containing N elements, plus removal of these elements
#       from the queue.
#
#       2 variants of doing this.
#       (a) pop all at once.
#       (b) pop them one at a time.

# N in { 0 1 10 100 1000 10000 }
# M in {   1 10 ... N }

# Expected O(m), m = size of result.

foreach n $series {
    foreach m $series {
	if {$m == 0} continue
	if {$m > $n} continue

	bench -desc "queue pop head all $n/$m" -ipre {
	    make $n
	} -body {
	    q pop head $m
	} -ipost {
	    q destroy
	}

	bench -desc "queue pop head inc $n/$m" -pre {
	    proc foo {} [join [lrepeat $m {q pop head}] \n]
	    catch {foo} ;# compile
	} -ipre {
	    make $n
	} -body {
	    foo
	} -ipost {
	    q destroy
	} -post {
	    rename foo {}
	}

	bench -desc "queue pop tail all $n/$m" -ipre {
	    make $n
	} -body {
	    q pop tail $m
	} -ipost {
	    q destroy
	}

	bench -desc "queue pop tail inc $n/$m" -pre {
	    proc foo {} [join [lrepeat $m {q pop tail}] \n]
	    catch {foo} ;# compile
	} -ipre {
	    make $n
	} -body {
	    foo
	} -ipost {
	    q destroy
	} -post {
	    rename foo {}
	}
    }
}

# ### ### ### ######### ######### ######### ###########################

# append - Time to add N elements to an empty queue.
#
#       2 variants of doing this.
#       (a) append all at once.
#       (b) append them one at a time.

# N in { 0 1 10 100 1000 10000 }

# Expected O(n), n = size of resulting queue.
# Variant (b) should have higher overhead however.

foreach n $series {
    if {$n == 0} continue

    set nel [iota $n]
    set cmd {} ; foreach x $nel { lappend cmd [list q append $x] }

    bench -desc "queue append all $n" -ipre {
	make 0
    } -body {
	q append {*}$nel
    } -ipost {
	q destroy
    }

    bench -desc "queue append inc $n" -pre {
	proc foo {} [join $cmd \n]
	catch {foo} ;# compile
    } -ipre {
	make 0
    } -body {
	foo
    } -ipost {
	q destroy
    } -post {
	rename foo {}
    }

    unset nel cmd
}

# ### ### ### ######### ######### ######### ###########################

# prepend - Time to add N elements to an empty queue.
#
#       2 variants of doing this.
#       (a) prepend all at once.
#       (b) prepend them one at a time.

# N in { 0 1 10 100 1000 10000 }

# Expected O(n), n = size of resulting queue.
# Variant (b) should have higher overhead however.

foreach n $series {
    if {$n == 0} continue

    set nel [iota $n]
    set cmd {} ; foreach x $nel { lappend cmd [list q prepend $x] }

    bench -desc "queue prepend all $n" -ipre {
	make 0
    } -body {
	q prepend {*}$nel
    } -ipost {
	q destroy
    }

    bench -desc "queue prepend inc $n" -pre {
	proc foo {} [join $cmd \n]
	catch {foo} ;# compile
    } -ipre {
	make 0
    } -body {
	foo
    } -ipost {
	q destroy
    } -post {
	rename foo {}
    }

    unset nel cmd
}

# ### ### ### ######### ######### ######### ###########################
## Complete

return
