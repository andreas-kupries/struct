'\"
'\" Generated from file '/home/aku/Projects/Struct/struct/embedded/stack/man/files/cstack.n' by tcllib/doctools with format 'nroff'
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "c::stack" n 1 stack "Tcl Data Structures"
.BS
.SH NAME
c::stack \- Create and manipulate stacks
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBc::slice  ?1?\fR
.sp
package require \fBc::stack  ?1?\fR
.sp
\fBCSTACK\fR \fBcstack_create\fR ( \fBCSTACK_CELL_FREE\fR \fIfun\fR, \fBvoid*\fR \fIclientdata\fR )
.sp
void \fBcstack_destroy\fR ( \fBCSTACK\fR \fIs\fR )
.sp
\fBlong int\fR \fBcstack_size\fR ( \fBCSTACK\fR \fIs\fR )
.sp
void \fBcstack_top\fR ( \fBCSTACK\fR \fIs\fR )
.sp
void \fBcstack_get\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR, \fBCSLICE_DIRECTION\fR \fIdir\fR )
.sp
void \fBcstack_push\fR ( \fBCSTACK\fR \fIs\fR, \fBvoid*\fR \fIitem\fR )
.sp
void \fBcstack_pop\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
.sp
void \fBcstack_trim\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
.sp
void \fBcstack_drop\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
.sp
void \fBcstack_rol\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR, \fBlong int\fR \fIstep\fR )
.sp
void \fBcstack_move\fR ( \fBCSTACK\fR \fIs\fR, \fBCSTACK\fR \fIsrc\fR )
.sp
void \fBcstack_clientdata_set\fR ( \fBCSTACK\fR \fIs\fR, \fBvoid*\fR \fIclientdata\fR )
.sp
void* \fBcstack_clientdata_get\fR ( \fBCSTACK\fR \fIs\fR )
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to Struct, a set of packages providing various data structures
to Tcl, and additional operations for existing Tcl structures.
.PP
This package provides a basic C API for the creation and use of
stacks. It does provide neither Tcl commands nor other items visible
at script level.
.PP
The package is meant to be used by other C level data structure
packages, either internally, or providing a Tcl level API to it. An
example of the latter is the C implementation of package
\fBstruct::stack\fR.
.PP
To support this the package provides its C API by means of a
stubs table which can be imported.
.SH API
.TP
\fBCSTACK\fR \fBcstack_create\fR ( \fBCSTACK_CELL_FREE\fR \fIfun\fR, \fBvoid*\fR \fIclientdata\fR )
This function creates and initializes a new stack object and returns
its handle. The client-data is simply stored and available upon
request, see function \fBcstack_clientdata_get\fR below.
.sp
The free function \fBfun\fR is for the release of memory
associated with the cells of the new stack. It may be NULL.
.TP
void \fBcstack_destroy\fR ( \fBCSTACK\fR \fIs\fR )
This function destroys the specified stack object, releasing all
allocated memory.
.sp
The cell release function is called for all cells left in the
stack.
.TP
\fBlong int\fR \fBcstack_size\fR ( \fBCSTACK\fR \fIs\fR )
This function returns the number of cells in the stack.
.TP
void \fBcstack_top\fR ( \fBCSTACK\fR \fIs\fR )
This function returns the topmost cell in the stack.
.TP
void \fBcstack_get\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR, \fBCSLICE_DIRECTION\fR \fIdir\fR )
This function returns the \fIn\fR topmost cells in the stack as a
slice, with the topmost cell either as first or last element of the
slice, depending on \fIdir\fR.
.sp
\fBcslice_normal\fR <==> topmost is first.
.sp
\fBcslice_revers\fR <==> topmost is last.
.TP
void \fBcstack_push\fR ( \fBCSTACK\fR \fIs\fR, \fBvoid*\fR \fIitem\fR )
This function pushes the \fIitem\fR onto the stack.
.TP
void \fBcstack_pop\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
This function removes the \fIn\fR topmost cells from the stack.
.sp
The cell release function is called for all removed cells.
This is in contrast to function \fBcstack_drop\fR below.
.TP
void \fBcstack_trim\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
This function removes cells until the stack contains only \fIn\fR
cells. If the stack had less cells to begin with nothing is done.
.sp
The cell release function is called for all removed cells.
.TP
void \fBcstack_drop\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR )
This function removes the \fIn\fR topmost cells from the stack.
.sp
\fINote:\fR The cell release function is \fInot\fR called for
the removed cells. This is in contrast to function \fBcstack_pop\fR
above.
.TP
void \fBcstack_rol\fR ( \fBCSTACK\fR \fIs\fR, \fBlong int\fR \fIn\fR, \fBlong int\fR \fIstep\fR )
This function rotates the \fIn\fR topmost cells in the stack by
\fIstep\fR elements.
.TP
void \fBcstack_move\fR ( \fBCSTACK\fR \fIs\fR, \fBCSTACK\fR \fIsrc\fR )
This function moves all cells in the stack \fIsrc\fR to the stack.
After the operation \fIsrc\fR is empty.
As the cells are not destroyed the release function is not called.
.sp
As a basic precaution the release functions of both stack are
compared, and have to match. The code will assert this and panic if
the condition is not true.
.TP
void \fBcstack_clientdata_set\fR ( \fBCSTACK\fR \fIs\fR, \fBvoid*\fR \fIclientdata\fR )
This function sets new client data into the stack.
.TP
void* \fBcstack_clientdata_get\fR ( \fBCSTACK\fR \fIs\fR )
This function returns the client data currently stored in the stack.
.PP
.SH LICENSE
This package, written by Andreas Kupries, is BSD licensed.
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the
\fIStruct Tracker\fR [https://chiselapp.com/user/andreas_kupries/repository/Struct/index].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
data structures, lifo, stack
.SH CATEGORY
Data structures