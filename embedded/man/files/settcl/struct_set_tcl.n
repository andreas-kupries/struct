'\"
'\" Generated from file '/home/aku/Projects/Struct/struct/embedded/man/files/settcl/struct_set_tcl.n' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2004-2012 Andreas Kupries <andreas_kupries@users.sourceforge.net>
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "struct::set" n 3 doc "Tcl Data Structures"
.BS
.SH NAME
struct::set \- Create and manipulate Tcl set values, Tcl implementation
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBstruct::set  ?3?\fR
.sp
\fB::struct set\fR \fBadd\fR \fIsvar\fR ?\fIset\fR...?
.sp
\fB::struct set\fR \fBcontains\fR \fIset\fR \fIelement\fR
.sp
\fB::struct set\fR \fBcreate\fR ?\fIelement\fR...?
.sp
\fB::struct set\fR \fBdifference\fR \fIS\fR ?\fISi\fR...?
.sp
\fB::struct set\fR \fBempty\fR \fIset\fR
.sp
\fB::struct set\fR \fBequal\fR \fIset1\fR \fIset2\fR
.sp
\fB::struct set\fR \fBexclude\fR \fIset\fR ?\fIelement\fR...?
.sp
\fB::struct set\fR \fBinclude\fR \fIset\fR ?\fIelement\fR...?
.sp
\fB::struct set\fR \fBintersect\fR ?\fIset\fR...?
.sp
\fB::struct set\fR \fBintersect3\fR \fIset1\fR \fIset2\fR
.sp
\fB::struct set\fR \fBset\fR \fIsvar\fR ?\fIelement\fR...?
.sp
\fB::struct set\fR \fBsize\fR \fIset\fR
.sp
\fB::struct set\fR \fBsubset\fR \fIA\fR \fIB\fR
.sp
\fB::struct set\fR \fBsubtract\fR \fIsvar\fR ?\fIset\fR...?
.sp
\fB::struct set\fR \fBsuperset\fR \fIA\fR \fIB\fR
.sp
\fB::struct set\fR \fBsymdifference\fR \fIA\fR \fIB\fR
.sp
\fB::struct set\fR \fBunion\fR ?\fIset\fR...?
.sp
\fB::struct set\fR \fBunset\fR \fIsvar\fR ?\fIelement\fR...?
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to Struct, a set of packages providing various data structures
to Tcl, and additional operations for existing Tcl structures.
.PP
This manpage documents the Tcl implementation of the
\fBstruct::set\fR package. It provides the same API as the C
implementation, although details like the exact wording of error
messages may differ.
The \fB::struct\fR namespace contains a single ensemble command
\fBset\fR with multiple methods for the manipulation of set values.
These methods are:
.TP
\fB::struct set\fR \fBadd\fR \fIsvar\fR ?\fIset\fR...?
This method manipulates the variable \fIsvar\fR, adding all elements
of the \fIset\fRs to the set stored in this variable. If no sets are
specified the variable is not changed. This has precendence over the
next statement.
.sp
If the variable named by \fIsvar\fR does not exist it will be
created.
.sp
The result of the method is the empty string.
.sp
See also the related methods \fBinclude\fR, \fBset\fR,
and \fBunion\fR.
.TP
\fB::struct set\fR \fBcontains\fR \fIset\fR \fIelement\fR
This method returns a boolean value indicating if the \fIset\fR value
contains the named \fIelement\fR (\fBtrue\fR), or not
(\fBfalse\fR).
.TP
\fB::struct set\fR \fBcreate\fR ?\fIelement\fR...?
This method returns a set containing the specified \fIelement\fRs.
Duplicates in the argumnts are removed.
.TP
\fB::struct set\fR \fBdifference\fR \fIS\fR ?\fISi\fR...?
This method computes the set difference of set value \fIS\fR and the
set values \fIS1\fR, \fIS2\fR, ..., i.e.
"(\fIS\fR - \fIS1\fR) - \fIS2\fR ..." and returns it as the result of
the method.
.sp
If no sets \fISi\fR are specified then \fIS\fR is returned.
.sp
See also the related methods \fBexclude\fR,
\fBsubtract\fR, and \fBunset\fR.
.TP
\fB::struct set\fR \fBempty\fR \fIset\fR
This method returns a boolean value indicating if the \fIset\fR value
is an empty set (\fBtrue\fR), or not (\fBfalse\fR).
.TP
\fB::struct set\fR \fBequal\fR \fIset1\fR \fIset2\fR
This method returns a boolean value indicating if the two set values
contain the same set (\fBtrue\fR) or not (\fBfalse\fR).
.TP
\fB::struct set\fR \fBexclude\fR \fIset\fR ?\fIelement\fR...?
This method removes the specified \fIelements\fR from the \fIset\fR value
and returns the reduced set as the result of the method.
.sp
If no elements are specified then \fIset\fR is returned.
.sp
See also the related methods \fBdifference\fR,
\fBsubtract\fR, and \fBunset\fR.
.TP
\fB::struct set\fR \fBinclude\fR \fIset\fR ?\fIelement\fR...?
This method adds the specified \fIelements\fR to the \fIset\fR value
and returns the extended set as the result of the method.
.sp
If no elements are specified then \fIset\fR is returned.
.sp
See also the related methods \fBadd\fR, \fBunion\fR, and
\fBset\fR.
.TP
\fB::struct set\fR \fBintersect\fR ?\fIset\fR...?
This method computes the intersection of all the specified \fIset\fR
values and returns it as the result of the method.
An empty set is returned if no \fIset\fRs are specified.
.TP
\fB::struct set\fR \fBintersect3\fR \fIset1\fR \fIset2\fR
This method is a combination of the methods \fBintersect\fR and
\fBdifference\fR.
Its result is a three-element list containing "\fIset1\fR*\fIset2\fR",
"\fIset1\fR-\fIset2\fR", and "\fIset2\fR-\fIset1\fR", in this
order. In other words, the intersection of the two arguments, and
their differences.
.TP
\fB::struct set\fR \fBset\fR \fIsvar\fR ?\fIelement\fR...?
This method manipulates the variable \fIsvar\fR, adding the specified
\fIelement\fRs to the set stored in this variable. If no elements are
specified the variable is not changed. This has precendence over the
next statement.
.sp
If the variable named by \fIsvar\fR does not exist it will be
created.
.sp
The result of the method is the number of elements actually
added to the set in \fIsvar\fR.
.sp
See also the related methods \fBadd\fR, \fBinclude\fR,
and \fBunion\fR.
.TP
\fB::struct set\fR \fBsize\fR \fIset\fR
This method returns the cardinalty of the \fIset\fR value, i.e. the
number of elements contained in the set. This is an integer number
greater than or equal to zero.
.TP
\fB::struct set\fR \fBsubset\fR \fIA\fR \fIB\fR
This method returns a boolean value indicating if the set value
\fIA\fR is a subset of the set value \fIB\fR (\fBtrue\fR), or not
(\fBfalse\fR).
.sp
\fINote\fR that a set A equal to B is a subset too.
.TP
\fB::struct set\fR \fBsubtract\fR \fIsvar\fR ?\fIset\fR...?
This method manipulates the variable \fIsvar\fR, removing all elements
of the \fIset\fRs from the set stored in this variable. If no sets are
specified the variable is not changed. This has precendence over the
next statement.
.sp
If the variable named by \fIsvar\fR does not exist and error
will be thrown.
.sp
The result of the method is the empty string.
.sp
See also the related methods \fBdifference\fR,
\fBexclude\fR, and \fBunset\fR.
.TP
\fB::struct set\fR \fBsuperset\fR \fIA\fR \fIB\fR
This method returns a boolean value indicating if the set value
\fIA\fR is a superset of the set value \fIB\fR (\fBtrue\fR), or not
(\fBfalse\fR).
.sp
\fINote\fR that a set A equal to B is a superset too.
.TP
\fB::struct set\fR \fBsymdifference\fR \fIA\fR \fIB\fR
This method computes the symmetric difference of the sets \fIA\fR and
\fIB\fR, i.e. ("(\fIA\fR - \fIB\fR) + (\fIB\fR - \fIA\fR)") and
returns it as the result of the command.
.TP
\fB::struct set\fR \fBunion\fR ?\fIset\fR...?
This method computes the union of \fIset\fR values i.e.
"(\fIS1\fR + \fIS2\fR) + \fIS3\fR ..." and returns it as the result of
the method.
.sp
An empty set is returned if no \fIset\fRs are specified.
.sp
See also the related methods \fBadd\fR, \fBinclude\fR,
and \fBset\fR.
.TP
\fB::struct set\fR \fBunset\fR \fIsvar\fR ?\fIelement\fR...?
This method manipulates the variable \fIsvar\fR, removing the specified
\fIelement\fRs from the set stored in this variable. If no elements are
specified the variable is not changed. This has precendence over the
next statement.
.sp
If the variable named by \fIsvar\fR does not exist an error
will be thrown.
.sp
The result of the method is the number of elements actually
removed from to the set in \fIsvar\fR.
.sp
See also the related methods \fBdifference\fR,
\fBexclude\fR, and \fBsubtract\fR.
.PP
Two groups of 4 methods deserve some additional attention to explain
the similarities and differences between them. These are:
.IP [1]
\fBadd\fR, \fBinclude\fR, \fBset\fR, and \fBunion\fR
.IP [2]
\fBdifference\fR, \fBexclude\fR, \fBsubtract\fR, and \fBunset\fR
.PP
Each can be organized into a 2x2 table with one axis showing the type
of the first argument (set value, or set variable), and the types of
the other arguments (elements, or set values). See below.
.CS


    Value      Variable
    -----      --------
    union      add      | Sets
    include    set      | Elements

    Value      Variable
    -----      --------
    difference subtract | Sets
    exclude    unset    | Elements

.CE
.SH CHANGES
.SS "CHANGES FOR VERSION 2"
Version 2 introduces incompatible changes to the API of stack objects,
therefore the change to the major version number.
.PP
The changes in detail are:
.IP [1]
Version 2 requires Tcl 8.5 or higher. Tcl 8.4 or less is not
supported anymore.
.IP [2]
Instance creation syntax has changed.
For comparison, the old syntax is
.CS


	struct::stack FOO       ; # or
	set foo [struct::stack]

.CE
.IP
whereas the new is
.CS


	struct stack create FOO ; # or
	set foo [struct stack new]

.CE
.IP [3]
Method \fBgetr\fR has been dropped. Use
.CS


	lreverse [FOO get]

.CE
.IP
instead, assuming that \fBFOO\fR is a stack instance.
.IP [4]
The methods \fBpeek\fR and \fBpeekr\fR have been renamed
to \fBtop\fR and \fBbottom\fR, respectively.
.IP [5]
The method \fBat\fR is new.
.PP
.SH LICENSE
This package, written by Andreas Kupries, is BSD licensed.
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the
\fIStruct Tracker\fR [https://chiselapp.com/user/andreas_kupries/repository/Struct/index].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
cardinality, data structures, difference, emptiness, exclusion, inclusion, intersection, membership, set, symmetric difference, union
.SH CATEGORY
Data structures
.SH COPYRIGHT
.nf
Copyright (c) 2004-2012 Andreas Kupries <andreas_kupries@users.sourceforge.net>

.fi