'\"
'\" Generated from file '/net/nas/data/andreask/Dev/Struct/struct/embedded/man/files/stacktcl/struct_stack_tcl.n' by tcllib/doctools with format 'nroff'
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "struct::stack" n 2 doc "Tcl Data Structures"
.BS
.SH NAME
struct::stack \- Create and manipulate Tcl stack objects, Tcl implementation
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
package require \fBTclOO \fR
.sp
package require \fBstruct::stack  ?2?\fR
.sp
\fB::struct stack\fR \fBnew\fR
.sp
\fB::struct stack\fR \fBcreate\fR \fIname\fR
.sp
\fIstackObj\fR \fBat\fR \fIindex\fR
.sp
\fIstackObj\fR \fBbottom\fR ?\fIcount\fR?
.sp
\fIstackObj\fR \fBclear\fR
.sp
\fIstackObj\fR \fBdestroy\fR
.sp
\fIstackObj\fR \fBget\fR
.sp
\fIstackObj\fR \fBpop\fR ?\fIcount\fR?
.sp
\fIstackObj\fR \fBpush\fR \fIitem\fR ?\fIitem...\fR?
.sp
\fIstackObj\fR \fBrotate\fR \fIcount\fR \fIsteps\fR
.sp
\fIstackObj\fR \fBsize\fR
.sp
\fIstackObj\fR \fBtop\fR ?\fIcount\fR?
.sp
\fIstackObj\fR \fBtrim\fR ?\fInewsize\fR?
.sp
\fIstackObj\fR \fBtrim*\fR ?\fInewsize\fR?
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to Struct, a set of packages providing various data structures
to Tcl, and additional operations for existing Tcl structures.
.PP
This manpage documents the Tcl implementation of the
\fBstruct::stack\fR package. It provides the same API as the C
implementation, although details like the exact wording of error
messages may differ.
.SH "CLASS API"
The \fB::struct\fR namespace contains a single command with
multiple methods for the creation of stack objects. These are:
.TP
\fB::struct stack\fR \fBnew\fR
This class method creates a new stack instance with an associated
global Tcl command and returns the fully qualified name of this
command. The name is auto-generated.
.TP
\fB::struct stack\fR \fBcreate\fR \fIname\fR
This class method creates a new stack instance with an associated
global Tcl command and returns the fully qualified name of this
command. The \fIname\fR is chosen by the user and provided as the
argument of the method.
.PP
.SH "INSTANCE API"
All instances of stacks created through the \fBClass API\fR
support the following API:
.TP
\fIstackObj\fR \fBat\fR \fIindex\fR
This method returns the requested element stored without removing it
from the stack. The topmost element of the stack is addressed by index
\fB0\fR, whereas the bottommost element can be addressed as either
\fBsize\fR-1, or \fBend\fR. This addressing order matches the order
used by method \fBget\fR to return the stack.
.sp
An error is thrown if the specified index is not within the
boundaries of the stack.
.sp
Note that the method accepts for \fIindex\fR all syntactical
forms supported by the Tcl builtin \fBlindex\fR.
.TP
\fIstackObj\fR \fBbottom\fR ?\fIcount\fR?
This method returns the bottom \fIcount\fR elements of the stack,
without removing them from the stack. The count defaults to \fB1\fR.
.sp
If only one element is requested the result is that element. If
more than one element is requested the result will be a list of
elements, with the bottommost element of the stack returned as the
last element of the result. This matches the ordering of method
\fBget\fR.
.sp
An error will be thrown if the stack does not hold enough
elements to satisfy the request, i.e. less than \fIcount\fR elements.
.TP
\fIstackObj\fR \fBclear\fR
This method removes all elements from the stack.
.sp
The method returns the empty string as its result.
.TP
\fIstackObj\fR \fBdestroy\fR
This method destroys the stack instance and the associated Tcl
command, releasing any associated resurces.
.sp
The method returns the empty string as its result.
.TP
\fIstackObj\fR \fBget\fR
This method returns all elements stored in the stack as a list,
without removing them from the stack. The topmost element of the stack
is returned as the first element of the list, while the bottom-most
element of the stack is matched to the last element of the list.
.sp
In other words, writing the list in left-to-right order the top
of the stack will be at the left, and the bottom at the right.
.TP
\fIstackObj\fR \fBpop\fR ?\fIcount\fR?
This method returns the top \fIcount\fR items of the stack, and
removes them from the stack. The count defaults to \fB1\fR.
.sp
If only one element is requested the result is that element. If
more than one element is requested the result will be a list of
elements, with the topmost element of the stack as the first element
of the result. This matches the ordering of method \fBget\fR.
.sp
An error will be thrown if the stack does not hold enough
elements to satisfy the request, i.e. less than \fIcount\fR elements.
.TP
\fIstackObj\fR \fBpush\fR \fIitem\fR ?\fIitem...\fR?
This method pushes the specified \fIitem\fR or items onto the stack.
If more than one \fIitem\fR is given, they will be pushed in the order
they are listed.
.sp
The method returns the empty string as its result.
.TP
\fIstackObj\fR \fBrotate\fR \fIcount\fR \fIsteps\fR
This method rotates the top \fIcount\fR elements of the stack by the
specified number of \fIsteps\fR.
.sp
Rotating 1 element (i.e. "\fIcount\fR == 1") is a no-op.
Similarly "\fIsteps\fR == 0 mod \fIn\fR" is a no-op as well.
.sp
Laying out the contents of the stack as returned by method
\fBget\fR, i.e. top at the left, a positive number of steps rotates
the elements left, whereas a negative \fIsteps\fR rotates to the
right.
.sp
The result of the method is the empty string.
.TP
\fIstackObj\fR \fBsize\fR
This method returns the number of elements stored in the stack.
.TP
\fIstackObj\fR \fBtop\fR ?\fIcount\fR?
This method returns the top \fIcount\fR elements of the stack, without
removing them from the stack. The count defaults to \fB1\fR.
.sp
If only one element is requested the result is that element. If
more than one element is requested the result will be a list of
elements, with the topmost element of the stack returned as the first
element of the result. This matches the ordering of method \fBget\fR.
.sp
An error will be thrown if the stack does not hold enough
elements to satisfy the request, i.e. less than \fIcount\fR elements.
.TP
\fIstackObj\fR \fBtrim\fR ?\fInewsize\fR?
This method shrinks the stack to contain at most \fInewsize\fR
elements and returns a list containing the elements which were
removed. Nothing is done if the stack is already at the specified
size, or smaller. In that case the result is the empty list.
.TP
\fIstackObj\fR \fBtrim*\fR ?\fInewsize\fR?
This method is a variant of method \fBtrim\fR which does not return
the removed elements, and only performs any necessary shrinking.
.PP
.SH CHANGES
.SS "CHANGES FOR VERSION 2"
Version 2 introduces incompatible changes to the API of stack objects,
therefore the change to the major version number.
.PP
The changes in detail are:
.IP [1]
Version 2 requires Tcl 8.5 or higher. Tcl 8.4 or less is not
supported anymore.
.IP [2]
Instance creation syntax has changed.
For comparison, the old syntax is
.CS


	struct::stack FOO       ; # or
	set foo [struct::stack]

.CE
.IP
whereas the new is
.CS


	struct stack create FOO ; # or
	set foo [struct stack new]

.CE
.IP [3]
Method \fBgetr\fR has been dropped. Use
.CS


	lreverse [FOO get]

.CE
.IP
instead, assuming that \fBFOO\fR is a stack instance.
.IP [4]
The methods \fBpeek\fR and \fBpeekr\fR have been renamed
to \fBtop\fR and \fBbottom\fR, respectively.
.IP [5]
The method \fBat\fR is new.
.PP
.SH LICENSE
This package, written by Andreas Kupries, is BSD licensed.
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the
\fIStruct Tracker\fR [https://chiselapp.com/user/andreas_kupries/repository/Struct/index].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
data structures, lifo, stack
.SH CATEGORY
Data structures